
from typing import Dict, Tuple

class ReplayController0:
    def __init__(self):
        self.recorded_actions = [(0.0, 180.0, True, False), (0.0, 180.0, False, False), (0.0, -160.91818199759754, False, False), (480.0, 13.660914325776773, True, False), (480.0, 13.660914325776773, False, False), (480.0, -116.19222383607888, False, False), (480.0, 13.660914325776773, True, False), (480.0, 13.660914325776773, False, False), (480.0, -180.0, False, False), (480.0, 13.660914325776773, True, False), (480.0, -180.0, False, False), (480.0, -75.35433587029682, False, False), (480.0, 13.660914325776773, True, False), (373.19609058188917, 48.328346365793074, False, False), (80.0, -1.1454922038484836, False, False), (80.0, -79.31243296516355, True, False), (80.0, 157.7045628539347, False, False), (80.0, -3.879740866101479, False, False), (80.0, -79.31243296516355, True, False), (80.0, 172.05833094341062, False, False), (80.0, -4.378633499650786, False, False), (80.0, -79.31243296516355, True, False), (80.0, -180.0, False, False), (80.0, -100.98812262991586, False, False), (80.0, -79.31243296516355, True, False), (-480.0, 180.0, False, False), (-480.0, -2.7448733539693646, False, False), (-480.0, 0.0, True, False), (-480.0, 114.09892267685642, False, False), (-480.0, -1.7243916376675035, False, False), (-480.0, 0.0, True, True), (-480.0, -104.71547942751134, False, False), (-373.19609058188894, -138.1468951341903, False, False), (0.0, 180.0, True, False), (0.0, 40.31734539539052, False, False), (480.0, -94.1191840236294, False, False), (480.0, -93.52041236102572, True, False), (480.0, -93.52041236102572, False, False), (480.0, -178.44577545252758, False, False), (480.0, -93.52041236102572, True, False), (480.0, -93.52041236102572, False, False), (480.0, 45.72680209802829, False, False), (480.0, -93.52041236102572, True, False), (480.0, -45.412312147306764, False, False), (480.0, 1.6504990324850282, False, False), (480.0, -93.52041236102572, True, False), (480.0, -34.14990534706357, False, False), (480.0, 1.6105431206071792, False, False), (480.0, -93.52041236102572, True, False), (480.0, -20.415092798040696, False, False), (480.0, 1.2619392974343606, False, False), (480.0, -93.52041236102572, True, False), (109.03053572827815, -5.743502786369605, False, False), (80.0, 0.26078500696771373, False, False), (80.0, 40.27412010073257, True, False), (80.0, 154.15249526252467, False, False), (80.0, 175.0755361614059, False, False), (80.0, 40.27412010073257, True, False), (80.0, 180.0, False, False), (80.0, 68.63753011960448, False, False), (80.0, 40.27412010073257, True, False), (80.0, 113.09066890106094, False, False), (80.0, -11.48809178313781, False, False), (80.0, 40.27412010073257, True, False), (80.0, 70.14313575800065, False, False), (80.0, 180.0, False, False), (80.0, 40.27412010073257, True, False), (80.0, 90.95342687241073, False, False), (80.0, -11.981182018061084, False, False), (80.0, 40.27412010073257, True, False), (80.0, -52.63653427077626, False, False), (80.0, 0.8510854137685752, False, False), (80.0, 40.27412010073257, True, False), (80.0, -20.030956467247034, False, False), (80.0, 0.3335741415584124, False, False), (80.0, 40.27412010073257, True, False), (-480.0, -18.828096319773834, False, False), (-480.0, 0.5362707255963524, False, False), (-480.0, 0.0, True, False), (-480.0, 25.228615801643542, False, False), (-480.0, -0.051292571226568696, False, False), (-480.0, 0.0, True, False), (-480.0, 28.01264975655417, False, False), (-480.0, 0.03699485427395456, False, False), (-480.0, 0.0, True, False), (-480.0, 180.0, False, False), (-480.0, 144.73775576799017, False, False), (-480.0, 0.0, True, False), (-109.03053572828154, 180.0, False, False), (0.0, 117.22913732829392, False, False), (0.0, 180.0, True, False), (0.0, 180.0, False, False), (0.0, -177.425475422811, False, False), (0.0, 180.0, True, False), (0.0, 154.66967149828335, False, False), (480.0, 23.670702860105372, False, False), (480.0, -104.6524689821624, True, False), (480.0, -104.6524689821624, False, False)]
        self.current_step = 0

    def actions(self, ship_state: Dict, game_state: Dict) -> Tuple[float, float, bool, bool]:
        if self.current_step < len(self.recorded_actions):
            action = self.recorded_actions[self.current_step]
            self.current_step += 1
            return tuple(action)
        else:
            return 0.0, 0.0, False, False  # Default action if out of recorded actions

    @property
    def name(self) -> str:
        return "Neo Replay Controller"
            